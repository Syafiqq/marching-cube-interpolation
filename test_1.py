import itertools

coordinate_mapping = {
    (0, 0, 0): 0,
    (1, 0, 0): 1,
    (1, 1, 0): 2,
    (0, 1, 0): 3,
    (0, 0, 1): 4,
    (1, 0, 1): 5,
    (1, 1, 1): 6,
    (0, 1, 1): 7,
}

reverse_coordinate_mapping = {v: list(k) for k, v in coordinate_mapping.items()}

cubes_points = [
    (0, 0, 0, 0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0, 0, 0, 1),
    (0, 0, 0, 0, 0, 0, 1, 0),
    (0, 0, 0, 0, 0, 0, 1, 1),
    (0, 0, 0, 0, 0, 1, 0, 0),
    (0, 0, 0, 0, 0, 1, 0, 1),
    (0, 0, 0, 0, 0, 1, 1, 0),
    (0, 0, 0, 0, 0, 1, 1, 1),
    (0, 0, 0, 0, 1, 0, 0, 0),
    (0, 0, 0, 0, 1, 0, 0, 1),
    (0, 0, 0, 0, 1, 0, 1, 0),
    (0, 0, 0, 0, 1, 0, 1, 1),
    (0, 0, 0, 0, 1, 1, 0, 0),
    (0, 0, 0, 0, 1, 1, 0, 1),
    (0, 0, 0, 0, 1, 1, 1, 0),
    (0, 0, 0, 0, 1, 1, 1, 1),
    (0, 0, 0, 1, 0, 0, 0, 0),
    (0, 0, 0, 1, 0, 0, 0, 1),
    (0, 0, 0, 1, 0, 0, 1, 0),
    (0, 0, 0, 1, 0, 0, 1, 1),
    (0, 0, 0, 1, 0, 1, 0, 0),
    (0, 0, 0, 1, 0, 1, 0, 1),
    (0, 0, 0, 1, 0, 1, 1, 0),
    (0, 0, 0, 1, 0, 1, 1, 1),
    (0, 0, 0, 1, 1, 0, 0, 0),
    (0, 0, 0, 1, 1, 0, 0, 1),
    (0, 0, 0, 1, 1, 0, 1, 0),
    (0, 0, 0, 1, 1, 0, 1, 1),
    (0, 0, 0, 1, 1, 1, 0, 0),
    (0, 0, 0, 1, 1, 1, 0, 1),
    (0, 0, 0, 1, 1, 1, 1, 0),
    (0, 0, 0, 1, 1, 1, 1, 1),
    (0, 0, 1, 0, 0, 0, 0, 0),
    (0, 0, 1, 0, 0, 0, 0, 1),
    (0, 0, 1, 0, 0, 0, 1, 0),
    (0, 0, 1, 0, 0, 0, 1, 1),
    (0, 0, 1, 0, 0, 1, 0, 0),
    (0, 0, 1, 0, 0, 1, 0, 1),
    (0, 0, 1, 0, 0, 1, 1, 0),
    (0, 0, 1, 0, 0, 1, 1, 1),
    (0, 0, 1, 0, 1, 0, 0, 0),
    (0, 0, 1, 0, 1, 0, 0, 1),
    (0, 0, 1, 0, 1, 0, 1, 0),
    (0, 0, 1, 0, 1, 0, 1, 1),
    (0, 0, 1, 0, 1, 1, 0, 0),
    (0, 0, 1, 0, 1, 1, 0, 1),
    (0, 0, 1, 0, 1, 1, 1, 0),
    (0, 0, 1, 0, 1, 1, 1, 1),
    (0, 0, 1, 1, 0, 0, 0, 0),
    (0, 0, 1, 1, 0, 0, 0, 1),
    (0, 0, 1, 1, 0, 0, 1, 0),
    (0, 0, 1, 1, 0, 0, 1, 1),
    (0, 0, 1, 1, 0, 1, 0, 0),
    (0, 0, 1, 1, 0, 1, 0, 1),
    (0, 0, 1, 1, 0, 1, 1, 0),
    (0, 0, 1, 1, 0, 1, 1, 1),
    (0, 0, 1, 1, 1, 0, 0, 0),
    (0, 0, 1, 1, 1, 0, 0, 1),
    (0, 0, 1, 1, 1, 0, 1, 0),
    (0, 0, 1, 1, 1, 0, 1, 1),
    (0, 0, 1, 1, 1, 1, 0, 0),
    (0, 0, 1, 1, 1, 1, 0, 1),
    (0, 0, 1, 1, 1, 1, 1, 0),
    (0, 0, 1, 1, 1, 1, 1, 1),
    (0, 1, 0, 0, 0, 0, 0, 0),
    (0, 1, 0, 0, 0, 0, 0, 1),
    (0, 1, 0, 0, 0, 0, 1, 0),
    (0, 1, 0, 0, 0, 0, 1, 1),
    (0, 1, 0, 0, 0, 1, 0, 0),
    (0, 1, 0, 0, 0, 1, 0, 1),
    (0, 1, 0, 0, 0, 1, 1, 0),
    (0, 1, 0, 0, 0, 1, 1, 1),
    (0, 1, 0, 0, 1, 0, 0, 0),
    (0, 1, 0, 0, 1, 0, 0, 1),
    (0, 1, 0, 0, 1, 0, 1, 0),
    (0, 1, 0, 0, 1, 0, 1, 1),
    (0, 1, 0, 0, 1, 1, 0, 0),
    (0, 1, 0, 0, 1, 1, 0, 1),
    (0, 1, 0, 0, 1, 1, 1, 0),
    (0, 1, 0, 0, 1, 1, 1, 1),
    (0, 1, 0, 1, 0, 0, 0, 0),
    (0, 1, 0, 1, 0, 0, 0, 1),
    (0, 1, 0, 1, 0, 0, 1, 0),
    (0, 1, 0, 1, 0, 0, 1, 1),
    (0, 1, 0, 1, 0, 1, 0, 0),
    (0, 1, 0, 1, 0, 1, 0, 1),
    (0, 1, 0, 1, 0, 1, 1, 0),
    (0, 1, 0, 1, 0, 1, 1, 1),
    (0, 1, 0, 1, 1, 0, 0, 0),
    (0, 1, 0, 1, 1, 0, 0, 1),
    (0, 1, 0, 1, 1, 0, 1, 0),
    (0, 1, 0, 1, 1, 0, 1, 1),
    (0, 1, 0, 1, 1, 1, 0, 0),
    (0, 1, 0, 1, 1, 1, 0, 1),
    (0, 1, 0, 1, 1, 1, 1, 0),
    (0, 1, 0, 1, 1, 1, 1, 1),
    (0, 1, 1, 0, 0, 0, 0, 0),
    (0, 1, 1, 0, 0, 0, 0, 1),
    (0, 1, 1, 0, 0, 0, 1, 0),
    (0, 1, 1, 0, 0, 0, 1, 1),
    (0, 1, 1, 0, 0, 1, 0, 0),
    (0, 1, 1, 0, 0, 1, 0, 1),
    (0, 1, 1, 0, 0, 1, 1, 0),
    (0, 1, 1, 0, 0, 1, 1, 1),
    (0, 1, 1, 0, 1, 0, 0, 0),
    (0, 1, 1, 0, 1, 0, 0, 1),
    (0, 1, 1, 0, 1, 0, 1, 0),
    (0, 1, 1, 0, 1, 0, 1, 1),
    (0, 1, 1, 0, 1, 1, 0, 0),
    (0, 1, 1, 0, 1, 1, 0, 1),
    (0, 1, 1, 0, 1, 1, 1, 0),
    (0, 1, 1, 0, 1, 1, 1, 1),
    (0, 1, 1, 1, 0, 0, 0, 0),
    (0, 1, 1, 1, 0, 0, 0, 1),
    (0, 1, 1, 1, 0, 0, 1, 0),
    (0, 1, 1, 1, 0, 0, 1, 1),
    (0, 1, 1, 1, 0, 1, 0, 0),
    (0, 1, 1, 1, 0, 1, 0, 1),
    (0, 1, 1, 1, 0, 1, 1, 0),
    (0, 1, 1, 1, 0, 1, 1, 1),
    (0, 1, 1, 1, 1, 0, 0, 0),
    (0, 1, 1, 1, 1, 0, 0, 1),
    (0, 1, 1, 1, 1, 0, 1, 0),
    (0, 1, 1, 1, 1, 0, 1, 1),
    (0, 1, 1, 1, 1, 1, 0, 0),
    (0, 1, 1, 1, 1, 1, 0, 1),
    (0, 1, 1, 1, 1, 1, 1, 0),
    (0, 1, 1, 1, 1, 1, 1, 1),
    (1, 0, 0, 0, 0, 0, 0, 0),
    (1, 0, 0, 0, 0, 0, 0, 1),
    (1, 0, 0, 0, 0, 0, 1, 0),
    (1, 0, 0, 0, 0, 0, 1, 1),
    (1, 0, 0, 0, 0, 1, 0, 0),
    (1, 0, 0, 0, 0, 1, 0, 1),
    (1, 0, 0, 0, 0, 1, 1, 0),
    (1, 0, 0, 0, 0, 1, 1, 1),
    (1, 0, 0, 0, 1, 0, 0, 0),
    (1, 0, 0, 0, 1, 0, 0, 1),
    (1, 0, 0, 0, 1, 0, 1, 0),
    (1, 0, 0, 0, 1, 0, 1, 1),
    (1, 0, 0, 0, 1, 1, 0, 0),
    (1, 0, 0, 0, 1, 1, 0, 1),
    (1, 0, 0, 0, 1, 1, 1, 0),
    (1, 0, 0, 0, 1, 1, 1, 1),
    (1, 0, 0, 1, 0, 0, 0, 0),
    (1, 0, 0, 1, 0, 0, 0, 1),
    (1, 0, 0, 1, 0, 0, 1, 0),
    (1, 0, 0, 1, 0, 0, 1, 1),
    (1, 0, 0, 1, 0, 1, 0, 0),
    (1, 0, 0, 1, 0, 1, 0, 1),
    (1, 0, 0, 1, 0, 1, 1, 0),
    (1, 0, 0, 1, 0, 1, 1, 1),
    (1, 0, 0, 1, 1, 0, 0, 0),
    (1, 0, 0, 1, 1, 0, 0, 1),
    (1, 0, 0, 1, 1, 0, 1, 0),
    (1, 0, 0, 1, 1, 0, 1, 1),
    (1, 0, 0, 1, 1, 1, 0, 0),
    (1, 0, 0, 1, 1, 1, 0, 1),
    (1, 0, 0, 1, 1, 1, 1, 0),
    (1, 0, 0, 1, 1, 1, 1, 1),
    (1, 0, 1, 0, 0, 0, 0, 0),
    (1, 0, 1, 0, 0, 0, 0, 1),
    (1, 0, 1, 0, 0, 0, 1, 0),
    (1, 0, 1, 0, 0, 0, 1, 1),
    (1, 0, 1, 0, 0, 1, 0, 0),
    (1, 0, 1, 0, 0, 1, 0, 1),
    (1, 0, 1, 0, 0, 1, 1, 0),
    (1, 0, 1, 0, 0, 1, 1, 1),
    (1, 0, 1, 0, 1, 0, 0, 0),
    (1, 0, 1, 0, 1, 0, 0, 1),
    (1, 0, 1, 0, 1, 0, 1, 0),
    (1, 0, 1, 0, 1, 0, 1, 1),
    (1, 0, 1, 0, 1, 1, 0, 0),
    (1, 0, 1, 0, 1, 1, 0, 1),
    (1, 0, 1, 0, 1, 1, 1, 0),
    (1, 0, 1, 0, 1, 1, 1, 1),
    (1, 0, 1, 1, 0, 0, 0, 0),
    (1, 0, 1, 1, 0, 0, 0, 1),
    (1, 0, 1, 1, 0, 0, 1, 0),
    (1, 0, 1, 1, 0, 0, 1, 1),
    (1, 0, 1, 1, 0, 1, 0, 0),
    (1, 0, 1, 1, 0, 1, 0, 1),
    (1, 0, 1, 1, 0, 1, 1, 0),
    (1, 0, 1, 1, 0, 1, 1, 1),
    (1, 0, 1, 1, 1, 0, 0, 0),
    (1, 0, 1, 1, 1, 0, 0, 1),
    (1, 0, 1, 1, 1, 0, 1, 0),
    (1, 0, 1, 1, 1, 0, 1, 1),
    (1, 0, 1, 1, 1, 1, 0, 0),
    (1, 0, 1, 1, 1, 1, 0, 1),
    (1, 0, 1, 1, 1, 1, 1, 0),
    (1, 0, 1, 1, 1, 1, 1, 1),
    (1, 1, 0, 0, 0, 0, 0, 0),
    (1, 1, 0, 0, 0, 0, 0, 1),
    (1, 1, 0, 0, 0, 0, 1, 0),
    (1, 1, 0, 0, 0, 0, 1, 1),
    (1, 1, 0, 0, 0, 1, 0, 0),
    (1, 1, 0, 0, 0, 1, 0, 1),
    (1, 1, 0, 0, 0, 1, 1, 0),
    (1, 1, 0, 0, 0, 1, 1, 1),
    (1, 1, 0, 0, 1, 0, 0, 0),
    (1, 1, 0, 0, 1, 0, 0, 1),
    (1, 1, 0, 0, 1, 0, 1, 0),
    (1, 1, 0, 0, 1, 0, 1, 1),
    (1, 1, 0, 0, 1, 1, 0, 0),
    (1, 1, 0, 0, 1, 1, 0, 1),
    (1, 1, 0, 0, 1, 1, 1, 0),
    (1, 1, 0, 0, 1, 1, 1, 1),
    (1, 1, 0, 1, 0, 0, 0, 0),
    (1, 1, 0, 1, 0, 0, 0, 1),
    (1, 1, 0, 1, 0, 0, 1, 0),
    (1, 1, 0, 1, 0, 0, 1, 1),
    (1, 1, 0, 1, 0, 1, 0, 0),
    (1, 1, 0, 1, 0, 1, 0, 1),
    (1, 1, 0, 1, 0, 1, 1, 0),
    (1, 1, 0, 1, 0, 1, 1, 1),
    (1, 1, 0, 1, 1, 0, 0, 0),
    (1, 1, 0, 1, 1, 0, 0, 1),
    (1, 1, 0, 1, 1, 0, 1, 0),
    (1, 1, 0, 1, 1, 0, 1, 1),
    (1, 1, 0, 1, 1, 1, 0, 0),
    (1, 1, 0, 1, 1, 1, 0, 1),
    (1, 1, 0, 1, 1, 1, 1, 0),
    (1, 1, 0, 1, 1, 1, 1, 1),
    (1, 1, 1, 0, 0, 0, 0, 0),
    (1, 1, 1, 0, 0, 0, 0, 1),
    (1, 1, 1, 0, 0, 0, 1, 0),
    (1, 1, 1, 0, 0, 0, 1, 1),
    (1, 1, 1, 0, 0, 1, 0, 0),
    (1, 1, 1, 0, 0, 1, 0, 1),
    (1, 1, 1, 0, 0, 1, 1, 0),
    (1, 1, 1, 0, 0, 1, 1, 1),
    (1, 1, 1, 0, 1, 0, 0, 0),
    (1, 1, 1, 0, 1, 0, 0, 1),
    (1, 1, 1, 0, 1, 0, 1, 0),
    (1, 1, 1, 0, 1, 0, 1, 1),
    (1, 1, 1, 0, 1, 1, 0, 0),
    (1, 1, 1, 0, 1, 1, 0, 1),
    (1, 1, 1, 0, 1, 1, 1, 0),
    (1, 1, 1, 0, 1, 1, 1, 1),
    (1, 1, 1, 1, 0, 0, 0, 0),
    (1, 1, 1, 1, 0, 0, 0, 1),
    (1, 1, 1, 1, 0, 0, 1, 0),
    (1, 1, 1, 1, 0, 0, 1, 1),
    (1, 1, 1, 1, 0, 1, 0, 0),
    (1, 1, 1, 1, 0, 1, 0, 1),
    (1, 1, 1, 1, 0, 1, 1, 0),
    (1, 1, 1, 1, 0, 1, 1, 1),
    (1, 1, 1, 1, 1, 0, 0, 0),
    (1, 1, 1, 1, 1, 0, 0, 1),
    (1, 1, 1, 1, 1, 0, 1, 0),
    (1, 1, 1, 1, 1, 0, 1, 1),
    (1, 1, 1, 1, 1, 1, 0, 0),
    (1, 1, 1, 1, 1, 1, 0, 1),
    (1, 1, 1, 1, 1, 1, 1, 0),
    (1, 1, 1, 1, 1, 1, 1, 1),
]


def generate_binary_combinations():
    return list(itertools.product([0, 1], repeat=8))


if __name__ == "__main__":
    for combination in generate_binary_combinations():
        print(combination)

if __name__ == "__main__":
    print(coordinate_mapping)
    print(reverse_coordinate_mapping)
