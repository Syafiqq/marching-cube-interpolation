# Axes are:
#
#      z
#      |     y
#      |   /
#      | /
#      +----- x

# Vertex and edge layout:
#
#            6             7
#            +-------------+               +-------------+          +-------------+          24-----25------26
#          / |           / |             / |           / |        / |           / |        21 |   22     23 |
#        /   |         /   |           /   |         /   |      /   |         /   |      /   |         /    |
#    4 +-----+-------+  5  |         +-----+-------+     |    +-----15----16--+   17    18-----19-----20    |
#      |   2 +-------+-----+ 3       |     6-----7-+-----8    |  12  +--13--+--14--+    |     +-------+-----+
#      |   /         |   /           |   3     4   |   5      9   /  10     11   /      |   /         |   /
#      | /           | /             | /           | /        | /           | /         | /           | /
#    0 +-------------+ 1             0------1------2          +-------------+           +-------------+


import errno
import math
from typing import Tuple, Dict
import os

import matplotlib.pyplot as plt
import numpy as np
from matplotlib.figure import Figure

from test.marching_cube.common.rule_origin_test import generate_binary_combinations, reverse_coordinate_mapping_tuple, \
    rotate_points_around_center, coordinate_mapping


def create_directory(path):
    directory = os.path.dirname(path)
    try:
        os.makedirs(directory)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise


def split_number(number: int, max_value: int) -> list[int]:
    result = []
    while number > max_value:
        result.append(max_value)
        number -= max_value
    result.append(number)
    return result


def create_subplot_index(n_rows: int, n_cols: int, rotation: int):
    subplot_index = list(range(1, (n_rows * n_cols) + 1))
    if n_cols > 1 and rotation > 0:
        # remove extra content
        extra_content = rotation % 2
        for i in range((n_rows * n_cols) + 1 - extra_content, (n_rows * n_cols) + 1):
            subplot_index.remove(i)
    subplots = []
    for subplot in subplot_index:
        subplots.append((n_rows, n_cols, subplot))
    return subplots


def create_image_plot(file_path: str, index: int, origin: int, rotation: list[Tuple[str, int]]):
    new_rotation: list[Tuple[str, int]] = []
    for axis, value in rotation:
        if value > 90:
            for v in split_number(value, 90):
                new_rotation.append((axis, v))
        else:
            new_rotation.append((axis, value))

    if len(new_rotation) > 0:
        rotation = new_rotation
    del new_rotation

    n_rows = 1 + math.ceil(len(rotation) / 2)
    n_cols = 2
    fig_index = create_subplot_index(n_rows, n_cols, len(rotation))

    """
    Create a dictionary of all possible combinations of 8 points
    {
        0: (0, 0, 0, 0, 0, 0, 0, 0, 0)
        1: (1, 0, 0, 0, 0, 0, 0, 0, 0)
        ...
        255: (1, 1, 1, 1, 1, 1, 1, 1, 1)
    }
    """
    cube_points: Dict[int, Tuple[int, ...]] = generate_binary_combinations()
    center = np.array([0.5, 0.5, 0.5])
    vertices: list[list[Tuple[int, int, int]]] = []
    titles: list[str] = []

    # Vertices start
    end_cube_point = cube_points[index]
    end_indices = [i for i, x in enumerate(end_cube_point) if x == 1]
    end_vertices: list[Tuple[int, int, int]] = [reverse_coordinate_mapping_tuple[i] for i in end_indices]
    vertices.append(end_vertices)
    titles.append(f'Rule: {index}')

    # Vertices start
    start_cube_point = cube_points[origin]
    start_indices = [i for i, x in enumerate(start_cube_point) if x == 1]
    start_vertices: list[Tuple[int, int, int]] = [reverse_coordinate_mapping_tuple[i] for i in start_indices]
    vertices.append(start_vertices)
    titles.append(f'Origin: {origin}')

    np_vertices = np.array(start_vertices)
    rotated_points = np_vertices
    for axis, angle in rotation:
        angles_rad = angle * (np.pi / 180)
        rotated_points = rotate_points_around_center(rotated_points, angles_rad, axis, center)
        rotated_points_tuple: list[Tuple[int, int, int]] = [
            tuple(np.round(point).astype(int)) for point in rotated_points
        ]
        vertices.append(rotated_points_tuple)
        titles.append(f'Rotate: {angle}Â° axis: {axis}')

    # Create a figure
    fig = plt.figure(figsize=(240 * n_cols / 80, 240 * n_rows / 80), dpi=80)
    for (fig_index, title, vertex) in zip(fig_index, titles, vertices):
        create_3d_plot(fig, fig_index, title, vertex)

    plt.savefig(file_path)
    plt.close()


def create_3d_plot(
        fig: Figure,
        fig_index: Tuple[int, int, int],
        title: str,
        vertices: [Tuple[int, int, int]],
):
    # Create the subplot
    plot = fig.add_subplot(fig_index[0], fig_index[1], fig_index[2], projection='3d')

    # Set label
    plot.set_xlabel('X')
    plot.set_ylabel('Y')
    plot.set_zlabel('Z')

    plot.set_title(title)

    # Set orientation of the axes
    plot.view_init(elev=-345, azim=-35)

    # Set tick marks
    plot.set_xticks([0, 0.5, 1, 1.5])
    plot.set_yticks([0, 0.5, 1, 1.5])
    plot.set_zticks([0, 0.5, 1, 1.5])

    # Draw axis lines
    plot.plot([0, 1.5], [0, 0], [0, 0], color='r')
    plot.plot([0, 0], [0, 1.5], [0, 0], color='g')
    plot.plot([0, 0], [0, 0], [0, 1.5], color='b')

    # Define points and labels
    points = list(coordinate_mapping.keys())
    labels = list(coordinate_mapping.values())

    # Plot points placeholder
    for point, label in zip(points, labels):
        plot.scatter(*point, label=label, s=50, c='gray')
        plot.text(*point, label, fontsize=16)

    # Plot points placeholder
    for vertex in vertices:
        plot.scatter(*vertex, s=100, c='red')


def show_cube():
    # Create a figure
    fig = plt.figure(figsize=(960 / 80, 480 / 80), dpi=80)

    # Create the first subplot
    ax1 = fig.add_subplot(121, projection='3d')

    ax1.set_xlabel('X')
    ax1.set_ylabel('Y')
    ax1.set_zlabel('Z')

    # Set orientation of the axes
    ax1.view_init(elev=-345, azim=-35)

    # Set tick marks
    ax1.set_xticks([0, 0.5, 1, 1.5])
    ax1.set_yticks([0, 0.5, 1, 1.5])
    ax1.set_zticks([0, 0.5, 1, 1.5])

    # Draw axis lines
    ax1.plot([0, 1.5], [0, 0], [0, 0], color='r')
    ax1.plot([0, 0], [0, 1.5], [0, 0], color='g')
    ax1.plot([0, 0], [0, 0], [0, 1.5], color='b')

    # Define points and labels
    points = list(coordinate_mapping.keys())
    labels = list(coordinate_mapping.values())

    # Plot points
    for point, label in zip(points, labels):
        ax1.scatter(*point, label=label, s=100, c='blue')
        ax1.text(*point, label, fontsize=16)

    points = [(0, 0, 0)]
    labels = ['1']
    # Plot points
    for point, label in zip(points, labels):
        ax1.scatter(*point, label=label, s=50, c='red')
        ax1.text(*point, label, fontsize=16)

    # Define mesh points
    mesh_points = np.array([(0, 0, 1), (1, 0, 1), (1, 1, 1), (0, 1, 1)])
    mesh_points_line = np.append(mesh_points, [mesh_points[0]], axis=0)
    ax1.plot(mesh_points_line[:, 0], mesh_points_line[:, 1], mesh_points_line[:, 2], color='red', linewidth=3)

    # Create mesh
    X = np.array([[mesh_points[0, 0], mesh_points[1, 0]], [mesh_points[3, 0], mesh_points[2, 0]]])
    Y = np.array([[mesh_points[0, 1], mesh_points[1, 1]], [mesh_points[3, 1], mesh_points[2, 1]]])
    Z = np.array([[mesh_points[0, 2], mesh_points[1, 2]], [mesh_points[3, 2], mesh_points[2, 2]]])
    ax1.plot_surface(X, Y, Z, color='yellow', alpha=0.5)

    # Define line points
    line_points = np.array([(1, 0, 0), (0, 1, 0)])

    # Create line
    ax1.plot(line_points[:, 0], line_points[:, 1], line_points[:, 2], color='red', linewidth=3)

    # Create the second subplot
    ax2 = fig.add_subplot(122)

    # Plot on the second subplot
    ax2.plot([4, 3, 2, 1])

    # Adjust the spacing between subplots
    plt.subplots_adjust(wspace=0.5, hspace=0.5)

    # Show the figure with both subplots
    plt.show()


def create_fig_ordered():
    dataset: [Tuple[int, int, list[Tuple[str, int]]]] = [
        # @formatter:off
        (0,   0,   []),
        (1,   1,   []),
        (2,   1,   [('z', 90)]),
        (3,   3,   []),
        (4,   1,   [('z', 270)]),
        (5,   3,   [('z', 270)]),
        (6,   6,   []),
        (7,   7,   []),
        (8,   1,   [('z', 180)]),
        (9,   6,   [('z', 90)]),
        (10,  3,   [('z', 90)]),
        (11,  7,   [('z', 90)]),
        (12,  3,   [('z', 180)]),
        (13,  7,   [('z', 270)]),
        (14,  7,   [('z', 180)]),
        (15,  15,  []),
        (16,  1,   [('y', 90)]),
        (17,  3,   [('y', 90)]),
        (18,  6,   [('z', 90), ('x', 270)]),
        (19,  7,   [('z', 270), ('x', 270)]),
        (20,  6,   [('z', 90), ('y', 90)]),
        (21,  7,   [('z', 90), ('y', 90)]),
        (22,  22,  []),
        (23,  23,  []),
        (24,  24,  []),
        (25,  25,  []),
        (26,  25,  [('z', 180), ('x', 270)]),
        (27,  27,  []),
        (28,  25,  [('z', 180), ('y', 90)]),
        (29,  29,  []),
        (30,  30,  []),
        (31,  31,  []),
        (32,  1,   [('y', 180)]),
        (33,  6,   [('x', 270)]),
        (34,  3,   [('y', 270)]),
        (35,  7,   [('z', 180), ('x', 270)]),
        (36,  24,  [('z', 90)]),
        (37,  25,  [('z', 270), ('x', 270)]),
        (38,  25,  [('z', 90)]),
        (39,  29,  [('z', 90)]),
        (40,  6,   [('y', 270)]),
        (41,  22,  [('z', 90)]),
        (42,  7,   [('y', 270)]),
        (43,  23,  [('z', 90)]),
        (44,  25,  [('z', 270), ('y', 270)]),
        (45,  30,  [('z', 90)]),
        (46,  27,  [('z', 90)]),
        (47,  31,  [('z', 90)]),
        (48,  3,   [('y', 180)]),
        (49,  7,   [('x', 270)]),
        (50,  7,   [('z', 90), ('x', 270)]),
        (51,  15,  [('x', 270)]),
        (52,  25,  [('y', 90)]),
        (53,  27,  [('y', 90)]),
        (54,  30,  [('z', 270), ('x', 270)]),
        (55,  31,  [('z', 270), ('x', 270)]),
        (56,  25,  [('z', 90), ('y', 270)]),
        (57,  30,  [('z', 180), ('x', 270)]),
        (58,  29,  [('z', 90), ('y', 270)]),
        (59,  31,  [('z', 180), ('x', 270)]),
        (60,  60,  []),
        (61,  61,  []),
        (62,  61,  [('z', 180), ('x', 270)]),
        (63,  63,  []),
        (64,  1,   [('x', 180)]),
        (65,  6,   [('y', 90)]),
        (66,  24,  [('z', 270)]),
        (67,  25,  [('z', 90), ('y', 90)]),
        (68,  3,   [('z', 180), ('y', 90)]),
        (69,  7,   [('z', 180), ('y', 90)]),
        (70,  25,  [('z', 270)]),
        (71,  27,  [('z', 270)]),
        (72,  6,   [('x', 90)]),
        (73,  22,  [('z', 270)]),
        (74,  25,  [('z', 90), ('x', 90)]),
        (75,  30,  [('z', 270)]),
        (76,  7,   [('x', 90)]),
        (77,  23,  [('z', 270)]),
        (78,  29,  [('z', 270)]),
        (79,  31,  [('z', 270)]),
        (80,  3,   [('z', 90), ('y', 180)]),
        (81,  7,   [('y', 90)]),
        (82,  25,  [('x', 270)]),
        (83,  29,  [('x', 270)]),
        (84,  7,   [('z', 270), ('y', 90)]),
        (85,  15,  [('y', 90)]),
        (86,  30,  [('z', 90), ('y', 90)]),
        (87,  31,  [('z', 90), ('y', 90)]),
        (88,  25,  [('z', 270), ('x', 90)]),
        (89,  30,  [('z', 180), ('y', 90)]),
        (90,  60,  [('z', 270)]),
        (91,  61,  [('z', 90), ('y', 90)]),
        (92,  27,  [('z', 180), ('y', 90)]),
        (93,  31,  [('z', 180), ('y', 90)]),
        (94,  61,  [('z', 270)]),
        (95,  63,  [('z', 270)]),
        (96,  6,   [('z', 90), ('y', 180)]),
        (97,  22,  [('y', 90)]),
        (98,  25,  [('y', 180)]),
        (99,  30,  [('x', 270)]),
        (100, 25,  [('x', 180)]),
        (101, 30,  [('y', 90)]),
        (102, 60,  [('y', 90)]),
        (103, 61,  [('z', 270), ('x', 270)]),
        (104, 22,  [('z', 90), ('x', 180)]),
        (105, 105, []),
        (106, 30,  [('z', 180), ('y', 270)]),
        (107, 107, []),
        (108, 30,  [('z', 180), ('x', 90)]),
        (109, 107, [('z', 180)]),
        (110, 61,  [('z', 90), ('x', 90)]),
        (111, 111, []),
        (112, 7,   [('z', 90), ('y', 180)]),
        (113, 23,  [('y', 90)]),
        (114, 27,  [('y', 180)]),
        (115, 31,  [('x', 270)]),
        (116, 29,  [('y', 90)]),
        (117, 31,  [('y', 90)]),
        (118, 61,  [('y', 90)]),
        (119, 63,  [('y', 90)]),
        (120, 30,  [('z', 90), ('x', 180)]),
        (121, 107, [('y', 180)]),
        (122, 61,  [('z', 90), ('y', 270)]),
        (123, 111, [('z', 90), ('x', 270)]),
        (124, 61,  [('x', 180)]),
        (125, 111, [('z', 90), ('y', 90)]),
        (126, 126, []),
        (127, 127, []),
        (128, 1,   [('z', 90), ('x', 180)]),
        (129, 24,  [('z', 180)]),
        (130, 6,   [('z', 90), ('y', 270)]),
        (131, 25,  [('y', 270)]),
        (132, 6,   [('z', 90), ('x', 90)]),
        (133, 25,  [('x', 90)]),
        (134, 22,  [('z', 180)]),
        (135, 30,  [('z', 180)]),
        (136, 3,   [('z', 90), ('x', 90)]),
        (137, 25,  [('z', 180)]),
        (138, 7,   [('z', 270), ('y', 270)]),
        (139, 29,  [('z', 180)]),
        (140, 7,   [('z', 90), ('x', 90)]),
        (141, 27,  [('z', 180)]),
        (142, 23,  [('z', 180)]),
        (143, 31,  [('z', 180)]),
        (144, 6,   [('y', 180)]),
        (145, 25,  [('z', 90), ('y', 180)]),
        (146, 22,  [('y', 180)]),
        (147, 30,  [('z', 90), ('x', 270)]),
        (148, 22,  [('x', 180)]),
        (149, 30,  [('z', 270), ('y', 90)]),
        (150, 105, [('z', 90)]),
        (151, 107, [('z', 270)]),
        (152, 25,  [('z', 90), ('x', 180)]),
        (153, 60,  [('y', 270)]),
        (154, 30,  [('z', 90), ('y', 270)]),
        (155, 61,  [('y', 270)]),
        (156, 30,  [('z', 270), ('x', 90)]),
        (157, 61,  [('z', 180), ('y', 90)]),
        (158, 107, [('z', 90)]),
        (159, 111, [('z', 90)]),
        (160, 3,   [('z', 90), ('y', 270)]),
        (161, 25,  [('z', 90), ('x', 270)]),
        (162, 7,   [('z', 90), ('y', 270)]),
        (163, 27,  [('y', 270)]),
        (164, 25,  [('z', 180), ('x', 90)]),
        (165, 60,  [('z', 90)]),
        (166, 30,  [('z', 270), ('y', 270)]),
        (167, 61,  [('z', 90)]),
        (168, 7,   [('z', 180), ('y', 270)]),
        (169, 30,  [('y', 270)]),
        (170, 15,  [('y', 270)]),
        (171, 31,  [('y', 270)]),
        (172, 29,  [('z', 180), ('x', 90)]),
        (173, 61,  [('z', 270), ('y', 270)]),
        (174, 31,  [('z', 270), ('y', 270)]),
        (175, 63,  [('z', 90)]),
        (176, 7,   [('y', 180)]),
        (177, 29,  [('z', 90), ('y', 180)]),
        (178, 23,  [('y', 180)]),
        (179, 31,  [('z', 90), ('x', 270)]),
        (180, 30,  [('x', 180)]),
        (181, 61,  [('z', 90), ('y', 180)]),
        (182, 107, [('y', 270)]),
        (183, 111, [('x', 270)]),
        (184, 27,  [('z', 90), ('y', 270)]),
        (185, 61,  [('z', 90), ('x', 270)]),
        (186, 31,  [('z', 90), ('y', 270)]),
        (187, 63,  [('y', 270)]),
        (188, 61,  [('z', 180), ('x', 90)]),
        (189, 126, [('z', 90)]),
        (190, 111, [('y', 270)]),
        (191, 127, [('z', 90)]),
        (192, 3,   [('x', 180)]),
        (193, 25,  [('z', 270), ('y', 90)]),
        (194, 25,  [('z', 180), ('y', 270)]),
        (195, 60,  [('z', 180)]),
        (196, 7,   [('z', 270), ('x', 90)]),
        (197, 29,  [('x', 90)]),
        (198, 30,  [('z', 90), ('x', 90)]),
        (199, 61,  [('x', 90)]),
        (200, 7,   [('z', 180), ('x', 90)]),
        (201, 30,  [('x', 90)]),
        (202, 27,  [('z', 90), ('x', 90)]),
        (203, 61,  [('z', 180)]),
        (204, 15,  [('x', 90)]),
        (205, 31,  [('x', 90)]),
        (206, 31,  [('z', 90), ('x', 90)]),
        (207, 63,  [('z', 180)]),
        (208, 7,   [('x', 180)]),
        (209, 27,  [('z', 90), ('y', 180)]),
        (210, 30,  [('y', 180)]),
        (211, 61,  [('x', 270)]),
        (212, 23,  [('x', 180)]),
        (213, 31,  [('z', 270), ('y', 90)]),
        (214, 107, [('z', 90), ('y', 180)]),
        (215, 111, [('y', 90)]),
        (216, 29,  [('z', 90), ('x', 180)]),
        (217, 61,  [('z', 270), ('x', 90)]),
        (218, 61,  [('z', 90), ('x', 180)]),
        (219, 126, [('z', 270)]),
        (220, 31,  [('z', 270), ('x', 90)]),
        (221, 63,  [('z', 180), ('y', 90)]),
        (222, 111, [('x', 90)]),
        (223, 127, [('z', 270)]),
        (224, 7,   [('z', 90), ('x', 180)]),
        (225, 30,  [('z', 90), ('y', 180)]),
        (226, 29,  [('y', 180)]),
        (227, 61,  [('y', 180)]),
        (228, 27,  [('x', 180)]),
        (229, 61,  [('z', 270), ('y', 90)]),
        (230, 61,  [('z', 180), ('y', 270)]),
        (231, 126, [('z', 180)]),
        (232, 23,  [('z', 90), ('x', 180)]),
        (233, 107, [('x', 180)]),
        (234, 31,  [('z', 180), ('y', 270)]),
        (235, 111, [('z', 90), ('y', 270)]),
        (236, 31,  [('z', 180), ('x', 90)]),
        (237, 111, [('z', 90), ('x', 90)]),
        (238, 63,  [('z', 90), ('x', 90)]),
        (239, 127, [('z', 180)]),
        (240, 15,  [('y', 180)]),
        (241, 31,  [('z', 90), ('y', 180)]),
        (242, 31,  [('y', 180)]),
        (243, 63,  [('y', 180)]),
        (244, 31,  [('x', 180)]),
        (245, 63,  [('z', 90), ('y', 180)]),
        (246, 111, [('z', 90), ('y', 180)]),
        (247, 127, [('y', 90)]),
        (248, 31,  [('z', 90), ('x', 180)]),
        (249, 111, [('y', 180)]),
        (250, 63,  [('z', 90), ('y', 270)]),
        (251, 127, [('y', 180)]),
        (252, 63,  [('x', 180)]),
        (253, 127, [('x', 180)]),
        (254, 127, [('z', 90), ('x', 180)]),
        (255, 255, []),
        # @formatter:on
    ]
    for index, origin, rotation in dataset:
        filepath = f'/tmp/fig_ordered/{str(index).zfill(3)}.png'
        create_directory(filepath)
        create_image_plot(filepath, index, origin, rotation)


def create_fig_grouped():
    # @formatter:off
    uniqueness = {
                0: {(0, 0, 0, 0, 0, 0, 0, 0): [(0, [])]},
                1: {(1, 0, 0, 0, 0, 0, 0, 0): [(1, []), (2, [('z', 90)]), (4, [('z', 270)]), (8, [('z', 180)]), (16, [('y', 90)]), (32, [('y', 180)]), (64, [('x', 180)]), (128, [('z', 90), ('x', 180)])]},
                2: {(1, 1, 0, 0, 0, 0, 0, 0): [(3, []), (5, [('z', 270)]), (10, [('z', 90)]), (12, [('z', 180)]), (17, [('y', 90)]), (34, [('y', 270)]), (48, [('y', 180)]), (68, [('z', 180), ('y', 90)]), (80, [('z', 90), ('y', 180)]), (136, [('z', 90), ('x', 90)]), (160, [('z', 90), ('y', 270)]), (192, [('x', 180)])], (0, 1, 1, 0, 0, 0, 0, 0): [(6, []), (9, [('z', 90)]), (18, [('z', 90), ('x', 270)]), (20, [('z', 90), ('y', 90)]), (33, [('x', 270)]), (40, [('y', 270)]), (65, [('y', 90)]), (72, [('x', 90)]), (96, [('z', 90), ('y', 180)]), (130, [('z', 90), ('y', 270)]), (132, [('z', 90), ('x', 90)]), (144, [('y', 180)])], (0, 0, 0, 1, 1, 0, 0, 0): [(24, []), (36, [('z', 90)]), (66, [('z', 270)]), (129, [('z', 180)])]},
                3: {(1, 1, 1, 0, 0, 0, 0, 0): [(7, []), (11, [('z', 90)]), (13, [('z', 270)]), (14, [('z', 180)]), (19, [('z', 270), ('x', 270)]), (21, [('z', 90), ('y', 90)]), (35, [('z', 180), ('x', 270)]), (42, [('y', 270)]), (49, [('x', 270)]), (50, [('z', 90), ('x', 270)]), (69, [('z', 180), ('y', 90)]), (76, [('x', 90)]), (81, [('y', 90)]), (84, [('z', 270), ('y', 90)]), (112, [('z', 90), ('y', 180)]), (138, [('z', 270), ('y', 270)]), (140, [('z', 90), ('x', 90)]), (162, [('z', 90), ('y', 270)]), (168, [('z', 180), ('y', 270)]), (176, [('y', 180)]), (196, [('z', 270), ('x', 90)]), (200, [('z', 180), ('x', 90)]), (208, [('x', 180)]), (224, [('z', 90), ('x', 180)])], (0, 1, 1, 0, 1, 0, 0, 0): [(22, []), (41, [('z', 90)]), (73, [('z', 270)]), (97, [('y', 90)]), (104, [('z', 90), ('x', 180)]), (134, [('z', 180)]), (146, [('y', 180)]), (148, [('x', 180)])], (1, 0, 0, 1, 1, 0, 0, 0): [(25, []), (26, [('z', 180), ('x', 270)]), (28, [('z', 180), ('y', 90)]), (37, [('z', 270), ('x', 270)]), (38, [('z', 90)]), (44, [('z', 270), ('y', 270)]), (52, [('y', 90)]), (56, [('z', 90), ('y', 270)]), (67, [('z', 90), ('y', 90)]), (70, [('z', 270)]), (74, [('z', 90), ('x', 90)]), (82, [('x', 270)]), (88, [('z', 270), ('x', 90)]), (98, [('y', 180)]), (100, [('x', 180)]), (131, [('y', 270)]), (133, [('x', 90)]), (137, [('z', 180)]), (145, [('z', 90), ('y', 180)]), (152, [('z', 90), ('x', 180)]), (161, [('z', 90), ('x', 270)]), (164, [('z', 180), ('x', 90)]), (193, [('z', 270), ('y', 90)]), (194, [('z', 180), ('y', 270)])]},
                4: {(1, 1, 1, 1, 0, 0, 0, 0): [(15, []), (51, [('x', 270)]), (85, [('y', 90)]), (170, [('y', 270)]), (204, [('x', 90)]), (240, [('y', 180)])], (1, 1, 1, 0, 1, 0, 0, 0): [(23, []), (43, [('z', 90)]), (77, [('z', 270)]), (113, [('y', 90)]), (142, [('z', 180)]), (178, [('y', 180)]), (212, [('x', 180)]), (232, [('z', 90), ('x', 180)])], (1, 1, 0, 1, 1, 0, 0, 0): [(27, []), (46, [('z', 90)]), (53, [('y', 90)]), (71, [('z', 270)]), (92, [('z', 180), ('y', 90)]), (114, [('y', 180)]), (141, [('z', 180)]), (163, [('y', 270)]), (184, [('z', 90), ('y', 270)]), (202, [('z', 90), ('x', 90)]), (209, [('z', 90), ('y', 180)]), (228, [('x', 180)])], (1, 0, 1, 1, 1, 0, 0, 0): [(29, []), (39, [('z', 90)]), (58, [('z', 90), ('y', 270)]), (78, [('z', 270)]), (83, [('x', 270)]), (116, [('y', 90)]), (139, [('z', 180)]), (172, [('z', 180), ('x', 90)]), (177, [('z', 90), ('y', 180)]), (197, [('x', 90)]), (216, [('z', 90), ('x', 180)]), (226, [('y', 180)])], (0, 1, 1, 1, 1, 0, 0, 0): [(30, []), (45, [('z', 90)]), (54, [('z', 270), ('x', 270)]), (57, [('z', 180), ('x', 270)]), (75, [('z', 270)]), (86, [('z', 90), ('y', 90)]), (89, [('z', 180), ('y', 90)]), (99, [('x', 270)]), (101, [('y', 90)]), (106, [('z', 180), ('y', 270)]), (108, [('z', 180), ('x', 90)]), (120, [('z', 90), ('x', 180)]), (135, [('z', 180)]), (147, [('z', 90), ('x', 270)]), (149, [('z', 270), ('y', 90)]), (154, [('z', 90), ('y', 270)]), (156, [('z', 270), ('x', 90)]), (166, [('z', 270), ('y', 270)]), (169, [('y', 270)]), (180, [('x', 180)]), (198, [('z', 90), ('x', 90)]), (201, [('x', 90)]), (210, [('y', 180)]), (225, [('z', 90), ('y', 180)])], (0, 0, 1, 1, 1, 1, 0, 0): [(60, []), (90, [('z', 270)]), (102, [('y', 90)]), (153, [('y', 270)]), (165, [('z', 90)]), (195, [('z', 180)])], (1, 0, 0, 1, 0, 1, 1, 0): [(105, []), (150, [('z', 90)])]},
                5: {(1, 1, 1, 1, 1, 0, 0, 0): [(31, []), (47, [('z', 90)]), (55, [('z', 270), ('x', 270)]), (59, [('z', 180), ('x', 270)]), (79, [('z', 270)]), (87, [('z', 90), ('y', 90)]), (93, [('z', 180), ('y', 90)]), (115, [('x', 270)]), (117, [('y', 90)]), (143, [('z', 180)]), (171, [('y', 270)]), (174, [('z', 270), ('y', 270)]), (179, [('z', 90), ('x', 270)]), (186, [('z', 90), ('y', 270)]), (205, [('x', 90)]), (206, [('z', 90), ('x', 90)]), (213, [('z', 270), ('y', 90)]), (220, [('z', 270), ('x', 90)]), (234, [('z', 180), ('y', 270)]), (236, [('z', 180), ('x', 90)]), (241, [('z', 90), ('y', 180)]), (242, [('y', 180)]), (244, [('x', 180)]), (248, [('z', 90), ('x', 180)])], (1, 0, 1, 1, 1, 1, 0, 0): [(61, []), (62, [('z', 180), ('x', 270)]), (91, [('z', 90), ('y', 90)]), (94, [('z', 270)]), (103, [('z', 270), ('x', 270)]), (110, [('z', 90), ('x', 90)]), (118, [('y', 90)]), (122, [('z', 90), ('y', 270)]), (124, [('x', 180)]), (155, [('y', 270)]), (157, [('z', 180), ('y', 90)]), (167, [('z', 90)]), (173, [('z', 270), ('y', 270)]), (181, [('z', 90), ('y', 180)]), (185, [('z', 90), ('x', 270)]), (188, [('z', 180), ('x', 90)]), (199, [('x', 90)]), (203, [('z', 180)]), (211, [('x', 270)]), (217, [('z', 270), ('x', 90)]), (218, [('z', 90), ('x', 180)]), (227, [('y', 180)]), (229, [('z', 270), ('y', 90)]), (230, [('z', 180), ('y', 270)])], (1, 1, 0, 1, 0, 1, 1, 0): [(107, []), (109, [('z', 180)]), (121, [('y', 180)]), (151, [('z', 270)]), (158, [('z', 90)]), (182, [('y', 270)]), (214, [('z', 90), ('y', 180)]), (233, [('x', 180)])]},
                6: {(1, 1, 1, 1, 1, 1, 0, 0): [(63, []), (95, [('z', 270)]), (119, [('y', 90)]), (175, [('z', 90)]), (187, [('y', 270)]), (207, [('z', 180)]), (221, [('z', 180), ('y', 90)]), (238, [('z', 90), ('x', 90)]), (243, [('y', 180)]), (245, [('z', 90), ('y', 180)]), (250, [('z', 90), ('y', 270)]), (252, [('x', 180)])], (1, 1, 1, 1, 0, 1, 1, 0): [(111, []), (123, [('z', 90), ('x', 270)]), (125, [('z', 90), ('y', 90)]), (159, [('z', 90)]), (183, [('x', 270)]), (190, [('y', 270)]), (215, [('y', 90)]), (222, [('x', 90)]), (235, [('z', 90), ('y', 270)]), (237, [('z', 90), ('x', 90)]), (246, [('z', 90), ('y', 180)]), (249, [('y', 180)])], (0, 1, 1, 1, 1, 1, 1, 0): [(126, []), (189, [('z', 90)]), (219, [('z', 270)]), (231, [('z', 180)])]},
                7: {(1, 1, 1, 1, 1, 1, 1, 0): [(127, []), (191, [('z', 90)]), (223, [('z', 270)]), (239, [('z', 180)]), (247, [('y', 90)]), (251, [('y', 180)]), (253, [('x', 180)]), (254, [('z', 90), ('x', 180)])]},
                8: {(1, 1, 1, 1, 1, 1, 1, 1): [(255, [])]},
        }
    # @formatter:on
    for unique in uniqueness:
        uniqueness1 = uniqueness[unique]
        # pass enumerated
        for index, unique1 in enumerate(uniqueness1):
            list_of_tuples = uniqueness1[unique1]
            comparison = list_of_tuples[0]
            for _tuple in list_of_tuples:
                filepath = f'/tmp/fig_grouped/var_{unique}_{index}/{str(_tuple[0]).zfill(3)}.png'
                create_directory(filepath)
                create_image_plot(filepath, _tuple[0], comparison[0], _tuple[1])


if __name__ == "__main__":
    create_fig_grouped()
    create_fig_ordered()
